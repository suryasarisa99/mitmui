import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mitmui/models/filter_models.dart';
import 'package:mitmui/screens/filter.dart';
import 'package:mitmui/screens/filter_manager.dart';
import 'package:mitmui/services/websocket_service.dart';

class FilterDemoPage extends ConsumerStatefulWidget {
  const FilterDemoPage({super.key});

  @override
  ConsumerState<FilterDemoPage> createState() => _FilterDemoPageState();
}

class _FilterDemoPageState extends ConsumerState<FilterDemoPage> {
  // The root of our filter structure. The UI will modify this object.
  final _filterManager = FilterManager();

  // Sample data to filter against.
  final List<MitmFlow> _allFlows = [
    MitmFlow(
      url: 'https://example.com/styles.css',
      method: 'GET',
      statusCode: 200,
    ),
    MitmFlow(
      url: 'https://example.com/api/users',
      method: 'POST',
      statusCode: 201,
    ),
    MitmFlow(url: 'https://google.com/', method: 'GET', statusCode: 302),
    MitmFlow(
      url: 'https://google.com/search?q=flutter',
      method: 'GET',
      statusCode: 200,
    ),
    MitmFlow(url: 'https://cdn.com/image.jpg', method: 'GET', statusCode: 404),
  ];

  List<MitmFlow> _filteredFlows = [];

  @override
  void initState() {
    super.initState();
    // Initialize with a root group containing one default condition
    _applyFilter();
    _filterManager.addListener(_onFilterChanged);
  }

  @override
  void dispose() {
    _filterManager.removeListener(_onFilterChanged);
    super.dispose();
  }

  void _onFilterChanged() {
    print('Filter changed: ${_filterManager.mitmproxyString}');
    // This is called by the UI widgets whenever the filter model is changed.
    setState(() {
      _applyFilter();
    });
  }

  // ###########################################################################
  // ## The Core Filtering Logic
  // ###########################################################################
  void _applyFilter() {
    _filteredFlows = _allFlows
        .where((flow) => _evaluateNode(_filterManager.rootFilter, flow))
        .toList();
  }

  bool _evaluateNode(FilterNode node, MitmFlow flow) {
    bool result;

    if (node is FilterGroup) {
      if (node.children.isEmpty) {
        result = true; // An empty group matches everything.
      } else {
        // Start with the evaluation of the first child.
        result = _evaluateNode(node.children.first, flow);

        // Sequentially apply operators to subsequent children.
        for (int i = 1; i < node.children.length; i++) {
          final op = node.operators[i - 1];
          if (op == LogicalOperator.and) {
            // Short-circuit AND if result is already false.
            if (!result) break;
            result = result && _evaluateNode(node.children[i], flow);
          } else {
            // OR
            // Short-circuit OR if result is already true.
            if (result) break;
            result = result || _evaluateNode(node.children[i], flow);
          }
        }
      }
    } else if (node is FilterCondition) {
      result = _evaluateCondition(node, flow);
    } else {
      result = false;
    }

    return node.isNegated ? !result : result;
  }

  bool _evaluateCondition(FilterCondition condition, MitmFlow flow) {
    if (condition.value.isEmpty) return true; // Empty value matches everything

    final String subject = switch (condition.keyType) {
      FilterKey.url => flow.url,
      FilterKey.method => flow.method,
      FilterKey.statusCode => flow.statusCode?.toString() ?? '',
      // Add other key types here...
      _ => '',
    };

    try {
      return switch (condition.operator) {
        FilterOperator.equals => subject == condition.value,
        FilterOperator.startsWith => subject.startsWith(condition.value),
        FilterOperator.endsWith => subject.endsWith(condition.value),
        FilterOperator.regex => RegExp(
          condition.value,
          caseSensitive: false,
        ).hasMatch(subject),
      };
    } catch (e) {
      // Invalid regex, treat as no match
      return false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dynamic Filter UI'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Filter Rules: ${_filterManager.mitmproxyString}',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            // This is the entry point for our recursive UI
            FilterGroupWidget(
              group: _filterManager.rootFilter,
              manager: _filterManager,

              isRoot: true,
            ),
            const Divider(height: 32),
            Text(
              'Filtered Results (${_filteredFlows.length})',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            TextButton(
              onPressed: () {
                final webSocketService = ref.read(websocketServiceProvider);
                webSocketService.updateFilter(_filterManager.mitmproxyString);
              },
              child: const Text('Set Filters'),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _filteredFlows.length,
                itemBuilder: (context, index) {
                  final flow = _filteredFlows[index];
                  return ListTile(
                    title: Text(flow.url),
                    subtitle: Text('Method: ${flow.method}'),
                    trailing: Chip(
                      label: Text(flow.statusCode.toString()),
                      backgroundColor: (flow.statusCode ?? 0) >= 400
                          ? Colors.red.shade100
                          : Colors.green.shade100,
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
